{"version":3,"sources":["Gameover.js","Playground.js","StartScreen.js","App.js","serviceWorker.js","index.js"],"names":["gameover","props","react_default","a","createElement","className","score","onClick","startGame","style","cursor","playground","map","row","i","cell","isHead","isBody","type","isFood","key","concat","col","startscreen","totalRowCount","totalColCount","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","placeFood","parseInt","Math","random","state","snake","head","body","direction","x","y","food","createMap","verticals","push","getSnakeSpeed","snakeSpeed","length","componentDidMount","focusRef","current","focus","setState","gameOver","setTimeout","runGame","foundFood","nextState","objectSpread","toConsumableArray","pop","changeDirection","event","keyCode","_ref","_ref2","_ref3","_ref4","find","inBody","React","createRef","_this2","_this$state","ref","onKeyDown","tabIndex","StartScreen","Gameover","Playground","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d840d31e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst gameover = (props) => {\n    return <div>\n        <h1 className=\"gamename\">GAME OVER</h1>\n        <h3 className=\"score\">SCORE {props.score} </h3>\n        <br></br>\n        <h2 onClick={props.startGame} style={{cursor:'pointer'}} className=\"startbutton\">RESTART</h2>\n    </div>\n}\n\nexport default gameover;","import React from 'react';\nimport './App.css';\n\nconst playground = (props) => {\n    return <div>\n        <h1 className=\"gamename\"> CLASSIC SNAKE GAME </h1>\n        <h3 className=\"score\">SCORE {props.score}</h3>\n        <div className=\"playground\">\n            {\n                props.playground.map((row, i) => (\n                    row.map((cell) => {\n\n                        if (props.isHead(cell) || props.isBody(cell))\n                            cell.type = `cell snakebodycell`;\n                        else if (props.isFood(cell))\n                            cell.type = `cell foodcell`;\n                        else\n                            cell.type = `cell`;\n\n                        return <div key={`${cell.row} ${cell.col}`} className={cell.type}></div>\n                    })\n                ))\n            }\n        </div>\n    </div>\n}\n\nexport default playground;","import React from 'react';\nimport './App.css';\n\nconst startscreen = (props) => {\n    return <div>\n        <h1 className=\"gamename\"> CLASSIC SNAKE GAME </h1>\n        <h3 onClick={props.startGame} style={{cursor:'pointer'}} className=\"startbutton\"> <br/>START GAME </h3>\n    </div>\n}\n\nexport default startscreen;","import React, { Component } from 'react';\nimport Gameover from './Gameover';\nimport Playground from './Playground';\nimport StartScreen from './StartScreen';\nimport './App.css';\n\nconst totalRowCount = 40;\nconst totalColCount = 40;\n\nconst playground = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.focusRef = React.createRef();\n    this.createMap(playground);\n  }\n\n  placeFood = () => ({\n    row: parseInt(Math.random() * totalRowCount),\n    col: parseInt(Math.random() * totalColCount)\n  });\n\n  state = {\n    startGame : true,\n    playground,\n    snake: {\n      head: {\n        row: parseInt(totalRowCount / 2),\n        col: parseInt(totalColCount / 2)\n      },\n      body: [],\n      direction: {\n        x: 1,\n        y: 0\n      }\n    },\n    food: this.placeFood()\n  }\n\n  createMap = (playground) => {\n    for (let row = 0; row < totalRowCount; row++) {\n      const verticals = [];\n      for (let col = 0; col < totalColCount; col++) {\n        verticals.push({\n          row,\n          col\n        });\n      }\n      playground.push(verticals);\n    }\n  }\n\n  getSnakeSpeed = () => {\n    let snakeSpeed = 100 - (this.state.snake.body.length * 20);\n    return snakeSpeed > 25 ? snakeSpeed : 25;\n  };\n\n  componentDidMount = () => {\n    this.focusRef.current.focus();\n  }\n\n  startGame = () => {\n    this.setState({ \n      startGame: false, \n      gameOver: false,\n      snake: {\n        head: {\n          row: parseInt(totalRowCount / 2),\n          col: parseInt(totalColCount / 2)\n        },\n        body: [],\n        direction: {\n          x: 1,\n          y: 0\n        }\n      }\n    });\n\n    setTimeout(() => {\n      this.runGame();\n    }, this.getSnakeSpeed());\n  }\n\n  runGame = () => {\n    this.setState(() => {\n      const foundFood = this.foundFood();\n      const nextState = {\n        snake: {\n          ...this.state.snake,\n          head: {\n            row: this.state.snake.head.row + this.state.snake.direction.y,\n            col: this.state.snake.head.col + this.state.snake.direction.x\n          },\n          body: [this.state.snake.head, ...this.state.snake.body]\n        },\n        food: foundFood ? this.placeFood() : this.state.food\n      };\n\n      if (nextState.snake.head.row === totalRowCount)\n        nextState.snake.head.row = 0;\n      else if (nextState.snake.head.row < 0)\n        nextState.snake.head.row = totalRowCount - 1;\n\n      if (nextState.snake.head.col === totalColCount)\n        nextState.snake.head.col = 0;\n      else if (nextState.snake.head.col < 0)\n        nextState.snake.head.col = totalColCount - 1;\n\n      if (!foundFood) nextState.snake.body.pop();\n\n      return nextState;\n    }, () => {\n      const { snake } = this.state;\n      if (this.isBody(snake.head)) {\n        this.setState({\n          gameOver: true\n        })\n        return;\n      }\n\n      setTimeout(() => {\n        this.runGame();\n      }, this.getSnakeSpeed());\n    });\n  }\n\n  foundFood = () => this.state.food.row === this.state.snake.head.row && this.state.food.col === this.state.snake.head.col;\n\n  changeDirection = (event) => {\n    const { snake } = this.state;\n    switch (event.keyCode) {\n      case 38:\n        if (snake.direction.y === 1) break;\n        this.setState(({ snake }) => ({\n          snake: {\n            ...snake,\n            direction: {\n              x: 0,\n              y: -1\n            }\n          }\n        }));\n        break;\n\n      case 40:\n        if (snake.direction.y === -1) break;\n        this.setState(({ snake }) => ({\n          snake: {\n            ...snake,\n            direction: {\n              x: 0,\n              y: 1\n            }\n          }\n        }));\n        break;\n\n      case 39:\n        if (snake.direction.x === -1) break;\n        this.setState(({ snake }) => ({\n          snake: {\n            ...snake,\n            direction: {\n              x: 1,\n              y: 0\n            }\n          }\n        }));\n        break;\n\n      case 37:\n        if (snake.direction.x === 1) break;\n        this.setState(({ snake }) => ({\n          snake: {\n            ...snake,\n            direction: {\n              x: -1,\n              y: 0\n            }\n          }\n        }));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  isFood = cell => this.state.food.row === cell.row && this.state.food.col === cell.col;\n  isHead = cell => this.state.snake.head.row === cell.row && this.state.snake.head.col === cell.col;\n  isBody = (cell) => {\n    return this.state.snake.body.find((inBody) => {\n      return inBody.row === cell.row && inBody.col === cell.col\n    })\n  };\n\n  render() {\n    const { playground, snake, gameOver, startGame } = this.state;\n    return (\n      <div ref={this.focusRef} onKeyDown={(event) => this.changeDirection(event)} className=\"App\" tabIndex=\"0\" >\n        {\n          startGame ? <StartScreen startGame={this.startGame}/>\n                    : gameOver ? <Gameover score={snake.body.length} startGame={this.startGame}/>\n                               : <Playground playground={playground} isHead={this.isHead} isBody={this.isBody} isFood={this.isFood} score={snake.body.length}/>\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}